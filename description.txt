Описание работы программы.

1. Получение объекта страницы.
2. Удаление мешающих тегов.
3. Выделение заголовков.
4. Выделение абзацев с текстом.
5. Замена внешнего вида гиперссылок.
6. Применение шаблона. По-умолчанию, либо указанный.
7. Сохранение результата в файл.

Исполняемые модули:
	minread_shell.py - используется для запуска
	minread_mod.py - модуль для класса Scraper

Пример обращения к классу:
	s = Scraper()
	s.get(url)
	s.render_template(template_name)
	s.save()

Зависимости.
	requests, beautifulsoup4

Подробнее.
1. Получение объекта страницы.
В коммандной строке указывается URL страницы, текст которой нужно получить.
Пример
minread_shell.py https://someurl.ru/some_page.html
с шаблоном:
minread_shell.py https://someurl.ru/some_page.html mytemplate

За запрос отвечает requests.
Полученный результат передаётся BeautifulSoup.

======================================
2. Чтобы исключить попадание ненужной информации, предварительно производится очистка тегов ненужных объектов.
Теги определяются в списках:
 - self.tags_for_remove - теги
 - self.class_attrs_for_remove - атрибуты в <div class="">
Списки заполнены по-умолчанию небольшой выборкой. Также можно указать в файлах шаблонов в соответстующих тегах.
Пример в файле ./templates/default.txt
Также поиск производится в блоках с атрибутами содержащих определённые значения.
Задаются в self.class_attrs_for_search либо в шаблонах наподобите списков для удаления.

======================================
3. Выделение заголовка.
Ищется объект тега <h1>, выделяется текстовая часть.
Если <h1> не найден, ищется <meta name="title" content="Заголовок">

======================================
4. Выделение абзацев.
На странице ищутся только <p> теги, для выделения текста.
Поиск производится в блоках <div> с атрибутами содержащих определённые значения. См. пункт 1.

======================================
5. Замена внешнего вида гиперссылок.
В <p> объектах перебираются <a> объекты, содержащие текст.
Если такие найдены, производится замена текста на текст по шаблону.

======================================
6. Применение шаблона.
Являются одновременно файлом настроек. Пример default.txt
Хранятся в директории ./templates/
При указании в коммандной строке указывается без расширения.
Результат применения шаблона текст готовый для сохранения.

Пример:
Теги для удаления:
[tags_for_remove]=script noscript style noindex form

Атрибуты тегов для удаления:
[class_attrs_for_remove]=social reg auth footer banner mobile comment preview inject incut

Атрибуты тегов, в дочерних элементах которых будет поиск текста.
[class_attrs_for_search]=content context article text

Максимальный размер строки. При превышение будет разбивка на строки.
[string_width]=80

Шаблон замена текста гиперссылки. После знака = и до конца строки можно указать различный текст,
в который будет обёрнута ссылка.
[url]=%url_text% [%url_href%]
Пример: для <a href="https://ya.ru/">Яндекс</a> с шаблоном 'Перейти -> %url_text% [%url_href%]' будет результат:
<a href="https://ya.ru/">Перейти -> Яндекс [https://ya.ru/]</a>

Шаблон заголовка. Разрешены переносы строк.
%header_begin% *** %header% ***
%header_end%
Всё между псевдотегами %header_begin% и %header_end% попадёт в шаблон. %header% заменится на заголовок.

Шаблон всего текста статьи. Разрешены переносы строк.
%p_all_begin%%p_all%%p_all_end%
Всё между псевдотегами %p_all_begin% и %p_all_end% попадёт в шаблон. %p_all% заменится весь текст статьи.

Шаблон отдельного абзаца. Разрешены переносы строк.
%p_begin%
%p%
%p_end%
Всё между псевдотегами %p_begin% и %p_end% попадёт в шаблон. %p% заменится на текст абзаца.

======================================
7. Сохранение результата в файл на диске.
Отрендеренный шаблон сохраняется в файл.
Сохранение происходит в UTF-8.
Путь для сохранения вычисляется по URL страницы следующим образом:
 - отбрасывается обозначение протокола *://
 - к оставшемуся пути предваряется директория ./pages/
 - проверяется наличие директорий, при небходимости создаюся все вложенные директории
 - сохранение файла